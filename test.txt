const int const_int1 = 1;
const int const_int2 = 2, const_int3 = 3, const_int0 = -0;
const char const_char1 = 'a';
const char const_char2 = 'b', const_char3 = 'c';

int var_int1;
int var_int2, var_int_array[10];
char var_char1;
char var_char2, var_char_array[10];


void printGlobalConsts(){
    printf("----------printGlobalConsts----------");
    printf("const_int1:",const_int1);
    printf("const_int2:",const_int2);
    printf("const_int3:",const_int3);
    printf("const_int0:",const_int0);
    printf("const_char1:",const_char1);
    printf("const_char2:",const_char2);
    printf("const_char3:",const_char3);
    printf("------------------------------");
    return;
}

void printGlobalVariables(){
    printf("----------printGlobalVariables----------");
    printf("var_int1:",var_int1);
    printf("var_int2:",var_int2);
    printf("var_char1:",var_char1);
    printf("var_char2:",var_char2);
    printf("------------------------------");
    return;
}

void printfGlobalArrays(){
    const int length = 10;
    int i;
    i = 0;
    while(i < length){
        printf("var_int_array[",i);
        printf("]:",var_int_array[i]);
    }
    i = 0;
    while(i < length){
        printf("var_char_array[",i);
        printf("]:",var_char_array[i]);
    }
    printf("------------------------------");
    return;
}

int testOperators(char a, int b){
    printf("----------testOperators----------");
    printf("a+b:",a+b);
    printf("a-b:",a-b);
    printf("a*b:",a*b);
    printf("a/2:",a/2);
    printf("------------------------------");
    return (0);
}

char testPrint(){
    char _character;
    _character = 'a';
    printf("----------testPrint----------");
    printf("!#$%&'()*+,-./0123456789:;<=>?@AZ[\]^_`az{|}~");
    printf('+');
    printf(_character);
    printf(_character + 1);
    printf(1230);
    printf("------------------------------");
    return ('a');
}

void testExpressions(){
    const int const_int1 = -1;
    const int const_int4 = 4;
    const char const_char1 = 'A';
    printf("----------testExpressions----------");
    printf(const_char1);
    printf(+const_char1);
    printf(-const_char2);
    printf(var_int_array[const_int0 + 1] + 'D');
    printf(const_char1 * (var_char_array[0] + const_char2));
    printf(-const_int1-(const_char2-'a')*(pow(const_int3, 2)*(const_int4 - const_int1)));
    printf("------------------------------");
}

void tsetIf(int a, int b){
    printf("----------testIf----------");
    if(a <= b){
        printf("a is smaller than b");
        a = a + b;
        printf("total:",a);
    }
    printf("------------------------------");
}

void testWhile(){
    int i, j;
    i = 0;
    j = 2;
    while(j < i){
        printf("j is smaller than i, j is:",j);
        j = j + 1;
    }
    while(i < j){
        printf("i is smaller than j, i is:", i);
        i = i + 1;
    }
    printf("------------------------------");
}

void testSwitch(int a, int b){
    int c;
    printf("----------testSwitch----------");
    c = a - b;
    switch(c){
        case 0:
            printf("a isn't bigger than b");
        case 1:
            printf("a is bigger than b");
    }
    switch(a){
        case 'a':
            printf("lucky, a is 'a'");
        case 'b':
            printf("lucky, a is 'b'");
        default:
            printf("I can't see.");
    }
    printf("------------------------------");
}

int pow(int a, int b){
    int c;
    if(b < 0) return (-1);
    if(a == 0) return (0);
    if(b == 0) return (1);
    c = a + 0;
    while(b > 1){
        c = c * a;
        b = b - 1;
    }
    return (c);
}

int Fibonacci(int n){
    if(n <= 0) return (0);
    if(n == 1) return (1);
    if(n == 2) return (1);
    return (Fibonacci(n - 1) + Fibonacci(n - 2));
}

void main(){
    int int1, int2;
    char char1, char2;
    int i;
    int n;
    n = int1 + 10;

    scanf(int1);
    scanf(int2, char1, char2);

    printGlobalConsts();

    var_int1 = int1 * (--3);
    var_int2 = int2 / 2;
    var_char1 = char1 + 2;
    var_char2 = char2 - 1;
    printGlobalVariables();

    i = 0;
    while(i < 10){
        var_int_array[i] = i;
        var_char_array[i] = 'a' + i;
        i = i + 1;
    }
    printfGlobalArrays();

    testOperators(int1, int2);

    testPrint();

    testExpressions();

    testIf(int1, int2);

    testWhile();

    testSwitch(char1, char2);
    testSwitch(char2 + 1, char1);

    printf("--------------tesRrecursion----------------");
    printf("n = ", n - n);
    printf("Fibonacci(n) = ", Fibonacci(0));
    printf("n = ", 1);
    printf("Fibonacci(n) = ", Fibonacci(1));
    printf("n = ", 2);
    printf("Fibonacci(n) = ", Fibonacci(2));
    printf("n = ", n);
    printf("Fibonacci(n) = ", Fibonacci(n));
    printf("------------------------------");
    
    return (0);
}